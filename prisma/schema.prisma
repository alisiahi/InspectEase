// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid()) // Clerk user ID
  email              String             @unique
  fullName           String
  avatarUrl          String? // Optional profile picture
  selfieUrl          String? // URL of the user's selfie
  documentUrl        String? // URL of the user's ID document
  verificationStatus VerificationStatus @default(NOT_VERIFIED)

  requests InspectionRequest[] // One-to-many relation with InspectionRequest
  missions InspectionMission[] // One-to-many relation with InspectionMission (as inspector)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InspectionRequest {
  id     String @id @default(cuid())
  userId String // User who created the request
  user   User   @relation(fields: [userId], references: [id])

  location String // Address or general location
  dateTime DateTime // Exact date and time of the inspection
  price    Float // Minimum price for the offer

  latitude  Float? // Latitude for the location
  longitude Float? // Longitude for the location

  mission InspectionMission? // One-to-one relation with InspectionMission

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InspectionMission {
  id                  String            @id @default(cuid())
  inspectionRequestId String            @unique // Reference to the InspectionRequest
  inspectionRequest   InspectionRequest @relation(fields: [inspectionRequestId], references: [id])

  inspectorId String // User who accepts and performs the inspection
  inspector   User   @relation(fields: [inspectorId], references: [id])

  photos InspectionPhoto[] // One-to-many relation with InspectionPhoto

  status   MissionStatus   @default(PENDING) // Status of the mission
  approval ApprovalStatus? // Approved or Rejected status by the requester
  feedback String? // Optional feedback from the requester

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InspectionPhoto {
  id                  String            @id @default(cuid())
  inspectionMissionId String // Reference to the InspectionMission
  inspectionMission   InspectionMission @relation(fields: [inspectionMissionId], references: [id])

  url String // URL of the uploaded photo

  createdAt DateTime @default(now())
}

enum MissionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ApprovalStatus {
  APPROVED
  REJECTED
}

enum VerificationStatus {
  NOT_VERIFIED
  PENDING
  VERIFIED
  FAILED
}
